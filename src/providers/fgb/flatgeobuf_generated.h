// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATGEOBUF_FLATGEOBUF_H_
#define FLATBUFFERS_GENERATED_FLATGEOBUF_FLATGEOBUF_H_

#include "flatbuffers/flatbuffers.h"

namespace FlatGeobuf {

struct Column;

struct Geometry;

struct Feature;

struct Value;

struct Header;

enum class ColumnType : uint8_t {
  Byte = 0,
  UByte = 1,
  Bool = 2,
  Short = 3,
  UShort = 4,
  Int = 5,
  UInt = 6,
  Long = 7,
  ULong = 8,
  Float = 9,
  Double = 10,
  String = 11,
  Json = 12,
  MIN = Byte,
  MAX = Json
};

inline const ColumnType (&EnumValuesColumnType())[13] {
  static const ColumnType values[] = {
    ColumnType::Byte,
    ColumnType::UByte,
    ColumnType::Bool,
    ColumnType::Short,
    ColumnType::UShort,
    ColumnType::Int,
    ColumnType::UInt,
    ColumnType::Long,
    ColumnType::ULong,
    ColumnType::Float,
    ColumnType::Double,
    ColumnType::String,
    ColumnType::Json
  };
  return values;
}

inline const char * const *EnumNamesColumnType() {
  static const char * const names[] = {
    "Byte",
    "UByte",
    "Bool",
    "Short",
    "UShort",
    "Int",
    "UInt",
    "Long",
    "ULong",
    "Float",
    "Double",
    "String",
    "Json",
    nullptr
  };
  return names;
}

inline const char *EnumNameColumnType(ColumnType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesColumnType()[index];
}

enum class GeometryType : uint8_t {
  Point = 0,
  MultiPoint = 1,
  LineString = 2,
  MultiLineString = 3,
  Polygon = 4,
  MultiPolygon = 5,
  GeometryCollection = 6,
  MIN = Point,
  MAX = GeometryCollection
};

inline const GeometryType (&EnumValuesGeometryType())[7] {
  static const GeometryType values[] = {
    GeometryType::Point,
    GeometryType::MultiPoint,
    GeometryType::LineString,
    GeometryType::MultiLineString,
    GeometryType::Polygon,
    GeometryType::MultiPolygon,
    GeometryType::GeometryCollection
  };
  return values;
}

inline const char * const *EnumNamesGeometryType() {
  static const char * const names[] = {
    "Point",
    "MultiPoint",
    "LineString",
    "MultiLineString",
    "Polygon",
    "MultiPolygon",
    "GeometryCollection",
    nullptr
  };
  return names;
}

inline const char *EnumNameGeometryType(GeometryType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesGeometryType()[index];
}

struct Column FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_TYPE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Column *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  ColumnType type() const {
    return static_cast<ColumnType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct ColumnBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Column::VT_NAME, name);
  }
  void add_type(ColumnType type) {
    fbb_.AddElement<uint8_t>(Column::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit ColumnBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ColumnBuilder &operator=(const ColumnBuilder &);
  flatbuffers::Offset<Column> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Column>(end);
    fbb_.Required(o, Column::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Column> CreateColumn(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    ColumnType type = ColumnType::Byte) {
  ColumnBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Column> CreateColumnDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ColumnType type = ColumnType::Byte) {
  return FlatGeobuf::CreateColumn(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      type);
}

struct Geometry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPES = 4,
    VT_RING_COUNTS = 6,
    VT_RING_LENGTHS = 8,
    VT_LENGTHS = 10,
    VT_COORDS = 12
  };
  const flatbuffers::Vector<uint8_t> *types() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_TYPES);
  }
  const flatbuffers::Vector<uint32_t> *ring_counts() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_RING_COUNTS);
  }
  const flatbuffers::Vector<uint32_t> *ring_lengths() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_RING_LENGTHS);
  }
  const flatbuffers::Vector<uint32_t> *lengths() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_LENGTHS);
  }
  const flatbuffers::Vector<double> *coords() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_COORDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPES) &&
           verifier.VerifyVector(types()) &&
           VerifyOffset(verifier, VT_RING_COUNTS) &&
           verifier.VerifyVector(ring_counts()) &&
           VerifyOffset(verifier, VT_RING_LENGTHS) &&
           verifier.VerifyVector(ring_lengths()) &&
           VerifyOffset(verifier, VT_LENGTHS) &&
           verifier.VerifyVector(lengths()) &&
           VerifyOffsetRequired(verifier, VT_COORDS) &&
           verifier.VerifyVector(coords()) &&
           verifier.EndTable();
  }
};

struct GeometryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_types(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> types) {
    fbb_.AddOffset(Geometry::VT_TYPES, types);
  }
  void add_ring_counts(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_counts) {
    fbb_.AddOffset(Geometry::VT_RING_COUNTS, ring_counts);
  }
  void add_ring_lengths(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_lengths) {
    fbb_.AddOffset(Geometry::VT_RING_LENGTHS, ring_lengths);
  }
  void add_lengths(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> lengths) {
    fbb_.AddOffset(Geometry::VT_LENGTHS, lengths);
  }
  void add_coords(flatbuffers::Offset<flatbuffers::Vector<double>> coords) {
    fbb_.AddOffset(Geometry::VT_COORDS, coords);
  }
  explicit GeometryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GeometryBuilder &operator=(const GeometryBuilder &);
  flatbuffers::Offset<Geometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Geometry>(end);
    fbb_.Required(o, Geometry::VT_COORDS);
    return o;
  }
};

inline flatbuffers::Offset<Geometry> CreateGeometry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> types = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_counts = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ring_lengths = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> lengths = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> coords = 0) {
  GeometryBuilder builder_(_fbb);
  builder_.add_coords(coords);
  builder_.add_lengths(lengths);
  builder_.add_ring_lengths(ring_lengths);
  builder_.add_ring_counts(ring_counts);
  builder_.add_types(types);
  return builder_.Finish();
}

inline flatbuffers::Offset<Geometry> CreateGeometryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *types = nullptr,
    const std::vector<uint32_t> *ring_counts = nullptr,
    const std::vector<uint32_t> *ring_lengths = nullptr,
    const std::vector<uint32_t> *lengths = nullptr,
    const std::vector<double> *coords = nullptr) {
  return FlatGeobuf::CreateGeometry(
      _fbb,
      types ? _fbb.CreateVector<uint8_t>(*types) : 0,
      ring_counts ? _fbb.CreateVector<uint32_t>(*ring_counts) : 0,
      ring_lengths ? _fbb.CreateVector<uint32_t>(*ring_lengths) : 0,
      lengths ? _fbb.CreateVector<uint32_t>(*lengths) : 0,
      coords ? _fbb.CreateVector<double>(*coords) : 0);
}

struct Feature FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STRING_ID = 4,
    VT_ULONG_ID = 6,
    VT_GEOMETRY = 8,
    VT_VALUES = 10
  };
  const flatbuffers::String *string_id() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING_ID);
  }
  uint64_t ulong_id() const {
    return GetField<uint64_t>(VT_ULONG_ID, 18446744073709551615);
  }
  const Geometry *geometry() const {
    return GetPointer<const Geometry *>(VT_GEOMETRY);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Value>> *values() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Value>> *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STRING_ID) &&
           verifier.VerifyString(string_id()) &&
           VerifyField<uint64_t>(verifier, VT_ULONG_ID) &&
           VerifyOffset(verifier, VT_GEOMETRY) &&
           verifier.VerifyTable(geometry()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.VerifyVectorOfTables(values()) &&
           verifier.EndTable();
  }
};

struct FeatureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_string_id(flatbuffers::Offset<flatbuffers::String> string_id) {
    fbb_.AddOffset(Feature::VT_STRING_ID, string_id);
  }
  void add_ulong_id(uint64_t ulong_id) {
    fbb_.AddElement<uint64_t>(Feature::VT_ULONG_ID, ulong_id, 18446744073709551615);
  }
  void add_geometry(flatbuffers::Offset<Geometry> geometry) {
    fbb_.AddOffset(Feature::VT_GEOMETRY, geometry);
  }
  void add_values(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Value>>> values) {
    fbb_.AddOffset(Feature::VT_VALUES, values);
  }
  explicit FeatureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FeatureBuilder &operator=(const FeatureBuilder &);
  flatbuffers::Offset<Feature> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Feature>(end);
    return o;
  }
};

inline flatbuffers::Offset<Feature> CreateFeature(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> string_id = 0,
    uint64_t ulong_id = 18446744073709551615,
    flatbuffers::Offset<Geometry> geometry = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Value>>> values = 0) {
  FeatureBuilder builder_(_fbb);
  builder_.add_ulong_id(ulong_id);
  builder_.add_values(values);
  builder_.add_geometry(geometry);
  builder_.add_string_id(string_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Feature> CreateFeatureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *string_id = nullptr,
    uint64_t ulong_id = 18446744073709551615,
    flatbuffers::Offset<Geometry> geometry = 0,
    const std::vector<flatbuffers::Offset<Value>> *values = nullptr) {
  return FlatGeobuf::CreateFeature(
      _fbb,
      string_id ? _fbb.CreateString(string_id) : 0,
      ulong_id,
      geometry,
      values ? _fbb.CreateVector<flatbuffers::Offset<Value>>(*values) : 0);
}

struct Value FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COLUMN_INDEX = 4,
    VT_BYTE_VALUE = 6,
    VT_UBYTE_VALUE = 8,
    VT_BOOL_VALUE = 10,
    VT_SHORT_VALUE = 12,
    VT_USHORT_VALUE = 14,
    VT_INT_VALUE = 16,
    VT_UINT_VALUE = 18,
    VT_LONG_VALUE = 20,
    VT_ULONG_VALUE = 22,
    VT_FLOAT_VALUE = 24,
    VT_DOUBLE_VALUE = 26,
    VT_STRING_VALUE = 28,
    VT_JSON_VALUE = 30
  };
  uint16_t column_index() const {
    return GetField<uint16_t>(VT_COLUMN_INDEX, 0);
  }
  int8_t byte_value() const {
    return GetField<int8_t>(VT_BYTE_VALUE, 0);
  }
  int8_t ubyte_value() const {
    return GetField<int8_t>(VT_UBYTE_VALUE, 0);
  }
  bool bool_value() const {
    return GetField<uint8_t>(VT_BOOL_VALUE, 0) != 0;
  }
  int16_t short_value() const {
    return GetField<int16_t>(VT_SHORT_VALUE, 0);
  }
  uint16_t ushort_value() const {
    return GetField<uint16_t>(VT_USHORT_VALUE, 0);
  }
  int32_t int_value() const {
    return GetField<int32_t>(VT_INT_VALUE, 0);
  }
  uint32_t uint_value() const {
    return GetField<uint32_t>(VT_UINT_VALUE, 0);
  }
  int64_t long_value() const {
    return GetField<int64_t>(VT_LONG_VALUE, 0);
  }
  uint64_t ulong_value() const {
    return GetField<uint64_t>(VT_ULONG_VALUE, 0);
  }
  float float_value() const {
    return GetField<float>(VT_FLOAT_VALUE, 0.0f);
  }
  double double_value() const {
    return GetField<double>(VT_DOUBLE_VALUE, 0.0);
  }
  const flatbuffers::String *string_value() const {
    return GetPointer<const flatbuffers::String *>(VT_STRING_VALUE);
  }
  const flatbuffers::String *json_value() const {
    return GetPointer<const flatbuffers::String *>(VT_JSON_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_COLUMN_INDEX) &&
           VerifyField<int8_t>(verifier, VT_BYTE_VALUE) &&
           VerifyField<int8_t>(verifier, VT_UBYTE_VALUE) &&
           VerifyField<uint8_t>(verifier, VT_BOOL_VALUE) &&
           VerifyField<int16_t>(verifier, VT_SHORT_VALUE) &&
           VerifyField<uint16_t>(verifier, VT_USHORT_VALUE) &&
           VerifyField<int32_t>(verifier, VT_INT_VALUE) &&
           VerifyField<uint32_t>(verifier, VT_UINT_VALUE) &&
           VerifyField<int64_t>(verifier, VT_LONG_VALUE) &&
           VerifyField<uint64_t>(verifier, VT_ULONG_VALUE) &&
           VerifyField<float>(verifier, VT_FLOAT_VALUE) &&
           VerifyField<double>(verifier, VT_DOUBLE_VALUE) &&
           VerifyOffset(verifier, VT_STRING_VALUE) &&
           verifier.VerifyString(string_value()) &&
           VerifyOffset(verifier, VT_JSON_VALUE) &&
           verifier.VerifyString(json_value()) &&
           verifier.EndTable();
  }
};

struct ValueBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_column_index(uint16_t column_index) {
    fbb_.AddElement<uint16_t>(Value::VT_COLUMN_INDEX, column_index, 0);
  }
  void add_byte_value(int8_t byte_value) {
    fbb_.AddElement<int8_t>(Value::VT_BYTE_VALUE, byte_value, 0);
  }
  void add_ubyte_value(int8_t ubyte_value) {
    fbb_.AddElement<int8_t>(Value::VT_UBYTE_VALUE, ubyte_value, 0);
  }
  void add_bool_value(bool bool_value) {
    fbb_.AddElement<uint8_t>(Value::VT_BOOL_VALUE, static_cast<uint8_t>(bool_value), 0);
  }
  void add_short_value(int16_t short_value) {
    fbb_.AddElement<int16_t>(Value::VT_SHORT_VALUE, short_value, 0);
  }
  void add_ushort_value(uint16_t ushort_value) {
    fbb_.AddElement<uint16_t>(Value::VT_USHORT_VALUE, ushort_value, 0);
  }
  void add_int_value(int32_t int_value) {
    fbb_.AddElement<int32_t>(Value::VT_INT_VALUE, int_value, 0);
  }
  void add_uint_value(uint32_t uint_value) {
    fbb_.AddElement<uint32_t>(Value::VT_UINT_VALUE, uint_value, 0);
  }
  void add_long_value(int64_t long_value) {
    fbb_.AddElement<int64_t>(Value::VT_LONG_VALUE, long_value, 0);
  }
  void add_ulong_value(uint64_t ulong_value) {
    fbb_.AddElement<uint64_t>(Value::VT_ULONG_VALUE, ulong_value, 0);
  }
  void add_float_value(float float_value) {
    fbb_.AddElement<float>(Value::VT_FLOAT_VALUE, float_value, 0.0f);
  }
  void add_double_value(double double_value) {
    fbb_.AddElement<double>(Value::VT_DOUBLE_VALUE, double_value, 0.0);
  }
  void add_string_value(flatbuffers::Offset<flatbuffers::String> string_value) {
    fbb_.AddOffset(Value::VT_STRING_VALUE, string_value);
  }
  void add_json_value(flatbuffers::Offset<flatbuffers::String> json_value) {
    fbb_.AddOffset(Value::VT_JSON_VALUE, json_value);
  }
  explicit ValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ValueBuilder &operator=(const ValueBuilder &);
  flatbuffers::Offset<Value> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Value>(end);
    return o;
  }
};

inline flatbuffers::Offset<Value> CreateValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t column_index = 0,
    int8_t byte_value = 0,
    int8_t ubyte_value = 0,
    bool bool_value = false,
    int16_t short_value = 0,
    uint16_t ushort_value = 0,
    int32_t int_value = 0,
    uint32_t uint_value = 0,
    int64_t long_value = 0,
    uint64_t ulong_value = 0,
    float float_value = 0.0f,
    double double_value = 0.0,
    flatbuffers::Offset<flatbuffers::String> string_value = 0,
    flatbuffers::Offset<flatbuffers::String> json_value = 0) {
  ValueBuilder builder_(_fbb);
  builder_.add_double_value(double_value);
  builder_.add_ulong_value(ulong_value);
  builder_.add_long_value(long_value);
  builder_.add_json_value(json_value);
  builder_.add_string_value(string_value);
  builder_.add_float_value(float_value);
  builder_.add_uint_value(uint_value);
  builder_.add_int_value(int_value);
  builder_.add_ushort_value(ushort_value);
  builder_.add_short_value(short_value);
  builder_.add_column_index(column_index);
  builder_.add_bool_value(bool_value);
  builder_.add_ubyte_value(ubyte_value);
  builder_.add_byte_value(byte_value);
  return builder_.Finish();
}

inline flatbuffers::Offset<Value> CreateValueDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t column_index = 0,
    int8_t byte_value = 0,
    int8_t ubyte_value = 0,
    bool bool_value = false,
    int16_t short_value = 0,
    uint16_t ushort_value = 0,
    int32_t int_value = 0,
    uint32_t uint_value = 0,
    int64_t long_value = 0,
    uint64_t ulong_value = 0,
    float float_value = 0.0f,
    double double_value = 0.0,
    const char *string_value = nullptr,
    const char *json_value = nullptr) {
  return FlatGeobuf::CreateValue(
      _fbb,
      column_index,
      byte_value,
      ubyte_value,
      bool_value,
      short_value,
      ushort_value,
      int_value,
      uint_value,
      long_value,
      ulong_value,
      float_value,
      double_value,
      string_value ? _fbb.CreateString(string_value) : 0,
      json_value ? _fbb.CreateString(json_value) : 0);
}

struct Header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ENVELOPE = 6,
    VT_GEOMETRY_TYPE = 8,
    VT_DIMENSIONS = 10,
    VT_COLUMNS = 12,
    VT_FEATURES_COUNT = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<double> *envelope() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_ENVELOPE);
  }
  GeometryType geometry_type() const {
    return static_cast<GeometryType>(GetField<uint8_t>(VT_GEOMETRY_TYPE, 0));
  }
  uint8_t dimensions() const {
    return GetField<uint8_t>(VT_DIMENSIONS, 2);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Column>> *columns() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Column>> *>(VT_COLUMNS);
  }
  uint64_t features_count() const {
    return GetField<uint64_t>(VT_FEATURES_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ENVELOPE) &&
           verifier.VerifyVector(envelope()) &&
           VerifyField<uint8_t>(verifier, VT_GEOMETRY_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DIMENSIONS) &&
           VerifyOffset(verifier, VT_COLUMNS) &&
           verifier.VerifyVector(columns()) &&
           verifier.VerifyVectorOfTables(columns()) &&
           VerifyField<uint64_t>(verifier, VT_FEATURES_COUNT) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Header::VT_NAME, name);
  }
  void add_envelope(flatbuffers::Offset<flatbuffers::Vector<double>> envelope) {
    fbb_.AddOffset(Header::VT_ENVELOPE, envelope);
  }
  void add_geometry_type(GeometryType geometry_type) {
    fbb_.AddElement<uint8_t>(Header::VT_GEOMETRY_TYPE, static_cast<uint8_t>(geometry_type), 0);
  }
  void add_dimensions(uint8_t dimensions) {
    fbb_.AddElement<uint8_t>(Header::VT_DIMENSIONS, dimensions, 2);
  }
  void add_columns(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Column>>> columns) {
    fbb_.AddOffset(Header::VT_COLUMNS, columns);
  }
  void add_features_count(uint64_t features_count) {
    fbb_.AddElement<uint64_t>(Header::VT_FEATURES_COUNT, features_count, 0);
  }
  explicit HeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeaderBuilder &operator=(const HeaderBuilder &);
  flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline flatbuffers::Offset<Header> CreateHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> envelope = 0,
    GeometryType geometry_type = GeometryType::Point,
    uint8_t dimensions = 2,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Column>>> columns = 0,
    uint64_t features_count = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_features_count(features_count);
  builder_.add_columns(columns);
  builder_.add_envelope(envelope);
  builder_.add_name(name);
  builder_.add_dimensions(dimensions);
  builder_.add_geometry_type(geometry_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Header> CreateHeaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<double> *envelope = nullptr,
    GeometryType geometry_type = GeometryType::Point,
    uint8_t dimensions = 2,
    const std::vector<flatbuffers::Offset<Column>> *columns = nullptr,
    uint64_t features_count = 0) {
  return FlatGeobuf::CreateHeader(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      envelope ? _fbb.CreateVector<double>(*envelope) : 0,
      geometry_type,
      dimensions,
      columns ? _fbb.CreateVector<flatbuffers::Offset<Column>>(*columns) : 0,
      features_count);
}

inline const FlatGeobuf::Header *GetHeader(const void *buf) {
  return flatbuffers::GetRoot<FlatGeobuf::Header>(buf);
}

inline const FlatGeobuf::Header *GetSizePrefixedHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FlatGeobuf::Header>(buf);
}

inline bool VerifyHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlatGeobuf::Header>(nullptr);
}

inline bool VerifySizePrefixedHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlatGeobuf::Header>(nullptr);
}

inline void FinishHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Header> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FlatGeobuf::Header> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FlatGeobuf

#endif  // FLATBUFFERS_GENERATED_FLATGEOBUF_FLATGEOBUF_H_
